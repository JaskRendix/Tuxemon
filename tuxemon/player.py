# SPDX-License-Identifier: GPL-3.0
# Copyright (c) 2014-2025 William Edwards <shadowapex@gmail.com>, Benjamin Bean <superman2k5@gmail.com>
from __future__ import annotations

import logging

from tuxemon.map import proj
from tuxemon.npc import NPC
from tuxemon.states.world.worldstate import WorldState

logger = logging.getLogger(__name__)


# Class definition for the player.
class Player(NPC):
    """Object for Players. WIP."""

    def __init__(
        self,
        npc_slug: str,
        world: WorldState,
    ) -> None:
        super().__init__(npc_slug, world=world)
        self.isplayer = True

    def update(self, time_delta: float) -> None:
        """
        Update the player movement around the game world.

        Increment the number of steps.

        Parameters:
            time_delta: A float of the time that has passed since
                the last frame. This is generated by clock.tick() / 1000.0.
        """
        # TODO: this will also record involuntary steps.
        # refactor so that only movements from the player are recorded.
        before = proj(self.position)

        super().update(time_delta)

        after = proj(self.position)

        diff_x = abs(after.x - before.x)
        diff_y = abs(after.y - before.y)

        # increases steps player
        self.steps += diff_x + diff_y

        if diff_x != 0 or diff_y != 0:
            self.steps += diff_x + diff_y

            if self.monsters:
                for monster in self.monsters:
                    monster.steps += diff_x + diff_y

            for key, value in self.game_variables.items():
                if key.startswith("steps_"):
                    self.game_variables[key] = max(
                        0.0, float(value) - (diff_x + diff_y)
                    )
